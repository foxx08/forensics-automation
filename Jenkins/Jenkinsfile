pipeline {
    agent any

    environment {
        OUTPUT_DIR = "${WORKSPACE}/forensicAnalysis" // Directory within the workspace for gathered evidence
    }

    stages {
        stage('Create Python Virtual Environment') {
            steps {
                sh '''
                rm -rf ${OUTPUT_DIR}
                pip install pipenv
                pipenv install
                '''
            }
        }
        stage('Perform Initial Hash Comparison') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Perform File System Analysis and Reporting') {
            steps {
                sh 'mkdir -p $OUTPUT_DIR/fileSystemAnalysis/'
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh 'pipenv run python scripts/image_analyzer.py --image-path "${imagePath}" --output-csv "${OUTPUT_DIR}/fileSystemAnalysis/"'
                }
            }
        }
        stage('Verify Image Integrity before Recovery') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Perform active Data Recovery') {
            steps {
                script {
                    def csvFile = readFile("${OUTPUT_DIR}/fileSystemAnalysis/partition_info.csv")
                    def rows = csvFile.readLines()
                    def dataRows = rows[1..-1]
                    def startValuesMap = [:]

                    dataRows.eachWithIndex { row, index ->
                        def columns = row.split(',')
                        def startValue = columns[2]
                        startValuesMap[index.toString()] = startValue
                    }

                    def keyList = startValuesMap.keySet().toList()
                    startValuesMap.each { key, value ->
                        sh "mkdir -p $OUTPUT_DIR/restoredData/activeData/partition${key}"
                        //Adjust condition value to your liking
                        if (value.toInteger() < 200000) {
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                sh "pipenv run python scripts/data_retriever.py --image-path '${imagePath}' --partitions-start '${value}' --output-directory '${OUTPUT_DIR}/restoredData/activeData/partition${key}'"
                            }
                        }
                    }
                }
            }
        }
        stage('Perform deleted Data Recovery') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                    mkdir -p $OUTPUT_DIR/restoredData/deletedData
                    foremost -i "${imagePath}" -o $OUTPUT_DIR/restoredData/deletedData
                    '''
                }
           }
        }
        stage('Verify Image Integrity after Recovery') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Perform File Analysis and Reporting') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh 'pipenv run python scripts/file_analyzer.py --folder-path "${OUTPUT_DIR}/restoredData/" --subfolder-path "/activeData/partition2/"'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'forensicAnalysis/**', allowEmptyArchive: true
        }
    }
}
