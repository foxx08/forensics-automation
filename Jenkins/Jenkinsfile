pipeline {
    agent any

    environment {
        OUTPUT_DIR = "${WORKSPACE}/forensicAnalysis" // Directory within the workspace for gathered evidence
    }

    stages {
        stage('Create Python Virtual Environment') {
            steps {
                sh '''
                pip install pipenv
                pipenv install
                '''
            }
        }
        stage('Perform Initial Hash Comparison') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Perform File System Analysis and Reporting') {
            steps {
                sh '''
                mkdir -p $OUTPUT_DIR/fileSystemAnalysis/
                pipenv run python scripts/image_analyzer.py --image-path "${imagePath}" --output-csv "${OUTPUT_DIR}/fileSystemAnalysis/"
                '''
            }
        }
        stage('Verify Image Integrity before Recovery') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Prepare Data Recovery') {
            steps {
                script {
                    def csvFile = readFile("${OUTPUT_DIR}/fileSystemAnalysis/partitionInfo.csv")
                    def rows = csvFile.readLines()
                    def dataRows = rows[1..-1]
                    def startValuesMap = [:]

                    dataRows.eachWithIndex { row, index ->
                        def columns = row.split(',')
                        def startValue = columns[2]
                        startValuesMap[index.toString()] = startValue
                    }

                    def keyList = startValuesMap.keySet().toList()
                    startValuesMap.each { key, value ->
                        sh "mkdir -p $OUTPUT_DIR/restoredData/activeData/partition${key}"
                        //sh 'pipenv run python scripts/restore_data.py --image-path "${imagePath}" --partitions-start ${value} --output-directory $OUTPUT_DIR/restoredData/activeData/partition${key}"'
                    }
                }
            }
        }
        stage('Perform Data Recovery') {
            steps {
                echo "Trying to restore active Data partition wise"
                sh 'pipenv run python scripts/data_retriever.py --image-path "${imagePath}" --partitions-start "32" --output-directory "${OUTPUT_DIR}/restoredData/activeData/partition2/"'
                echo "Attempt to restore active Data completed."
                /*sh '''
                echo "Trying to restore deleted Data"
                mkdir -p $OUTPUT_DIR/restoredData/deletedData
                foremost -i "${imagePath}" -o $OUTPUT_DIR/restoredData/deletedData
                echo "Attempt to restore deleted Data completed."
                '''*/
            }
        }
        stage('Verify Image Integrity after Recovery') {
            steps {
                sh 'pipenv run pytest ./scripts/test_integrity_checker.py -s --test-object "${imagePath}" --initial-hash "${initialHash}"'
            }
        }
        stage('Perform File Analysis') {
            steps {
                sh 'pipenv run python scripts/file_analyzer.py --folder-path "${OUTPUT_DIR}/restoredData/" --subfolder-path "/activeData/partition2/"'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'forensicAnalysis/**', allowEmptyArchive: true
        }
    }
}
